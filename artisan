require('dotenv/config')
require('ts-node/register')
const fs = require('fs')
const path = require('path')
const inquirer = require('inquirer')
const { program } = require('commander')
const { mkdir } = require('./scripts/helpers/mkdir')
const { log, error } = require('./scripts/helpers/logger')
const { capitalize } = require('./scripts/helpers/textTransformUtils')
const { templateLoader } = require('./scripts/helpers/templateLoader')
const {
	readConfig,
	registerComponent,
	reinjectComponents,
	unregisterComponent,
} = require('./scripts/component-utils')

const {
	APP_PAGES_DIR,
	APP_PAGES_STYLES_DIR,
	APP_PAGES_SCRIPTS_DIR,
	APP_COMPONENTS_DIR,
	ARTISAN_TEMPLATE_PUG_PAGE,
	ARTISAN_TEMPLATE_SCSS_PAGE,
	ARTISAN_TEMPLATE_JS_PAGE,
	ARTISAN_TEMPLATE_PUG_COMPONENT,
	ARTISAN_TEMPLATE_SCSS_COMPONENT,
	ARTISAN_TEMPLATE_JS_COMPONENT,
	ARTISAN_COMPONENT_CATEGORIES,
	ARTISAN_COMPONENT_AUTOIMPORT,
} = process.env

program.name('artisan')

const createPageQuestions = [
	{ type: 'input', name: 'name', message: 'Page name:' },
	{ type: 'confirm', name: 'scss', message: 'Create scss file?' },
	{ type: 'confirm', name: 'js', message: 'Create js file?' },
]

const createComponentQuestions = [
	{ type: 'input', name: 'name', message: 'Component name:' },
	{ type: 'confirm', name: 'pug', message: 'Create pug file?' },
	{ type: 'confirm', name: 'scss', message: 'Create scss file?' },
	{ type: 'confirm', name: 'js', message: 'Create js file?' },
	{
		type: 'list',
		name: 'category',
		message: 'Select component category:',
		choices: ARTISAN_COMPONENT_CATEGORIES.split(','),
	},
]

const inquirerError = (error) => error(`something went wrong`, error)

program
	.command('create:page')
	.description('create new page')
	.option('-f', 'force creating')
	.action((options) => {
		inquirer
			.prompt(createPageQuestions)
			.then(({ name, scss, js }) => {
				const pugPath = path.join(APP_PAGES_DIR, `${name}.pug`)
				const scssPath = path.join(APP_PAGES_STYLES_DIR, `${name}.scss`)
				const jsPath = path.join(APP_PAGES_SCRIPTS_DIR, `${name}.js`)

				if (!options.f && fs.existsSync(pugPath)) {
					return error('Pug file already exitst. Use -f for force creating')
				}

				if (!options.f && fs.existsSync(scssPath) && scss) {
					return error('Scss file already exitst. Use -f for force creating')
				}

				if (!options.f && fs.existsSync(jsPath) && js) {
					return error('Js file already exitst. Use -f for force creating')
				}

				const titleContent = `title ${capitalize(name)} | Project name\n`
				const styleContent = scss ? `+style('${name}.css')\n` : ''
				const scriptContent = js
					? `\nblock script\n\t+script('${name}.js')\n`
					: ''

				templateLoader()
					.load(ARTISAN_TEMPLATE_PUG_PAGE)
					.replace(`// @-title\n`, titleContent)
					.replace(`// @-style\n`, styleContent)
					.replace(`// @-script\n`, scriptContent)
					.write(pugPath)

				if (scss)
					templateLoader().load(ARTISAN_TEMPLATE_SCSS_PAGE).write(scssPath)
				if (js) templateLoader().load(ARTISAN_TEMPLATE_JS_PAGE).write(jsPath)

				log(`Page '${name}.pug' success added`)
			})
			.catch(inquirerError)
	})

program
	.command('create:component')
	.description('create new component')
	.option('-f', 'force creating')
	.action((options) => {
		if (ARTISAN_COMPONENT_AUTOIMPORT) {
			const pages = fs
				.readdirSync(APP_PAGES_DIR)
				.filter((file) => path.extname(file) === '.pug')

			createComponentQuestions.push({
				type: 'list',
				name: 'namespace',
				message: 'Where to connect this component?',
				choices: ['global', 'none', ...pages],
			})
		}

		inquirer
			.prompt(createComponentQuestions)
			.then(({ name, pug, scss, js, category, namespace }) => {
				const componentsDirPath = APP_COMPONENTS_DIR
				const targeteNamespace = namespace.replace('.pug', '')
				const categoryDirPath = path.join(componentsDirPath, category)
				const targetDirPath = path.join(categoryDirPath, name)
				const targetPath = path.join(targetDirPath, name)

				if (!options.f && fs.existsSync(targetDirPath)) {
					return error('Component already exitst. Use -f for force creating')
				}

				mkdir(componentsDirPath)
				mkdir(categoryDirPath)
				mkdir(targetDirPath)

				if (pug) {
					templateLoader()
						.load(ARTISAN_TEMPLATE_PUG_COMPONENT)
						.replace(/\${name}/g, name)
						.write(`${targetPath}.pug`)
				}

				if (scss) {
					templateLoader()
						.load(ARTISAN_TEMPLATE_SCSS_COMPONENT)
						.replace(/\${name}/g, name)
						.write(`${targetPath}.scss`)
				}

				if (js) {
					templateLoader()
						.load(ARTISAN_TEMPLATE_JS_COMPONENT)
						.write(`${targetPath}.js`)
				}

				registerComponent(targeteNamespace, category, name)
				reinjectComponents(targeteNamespace)

				log(`Component success added`)
			})
			.catch((err) => {
				console.error(err)
			})
	})

program
	.command('reinject:components')
	.description('reinject all components')
	.action(() => reinjectComponents('all'))

program
	.command('remove:component')
	.description('remove component')
	.action(() => {
		inquirer
			.prompt([
				{
					type: 'list',
					name: 'component',
					message: 'Select component:',
					choices: readConfig({ withoutNone: false }).toOneArray(),
				},
			])
			.then(({ component }) => {
				fs.rmSync(path.join(APP_COMPONENTS_DIR, component), {
					force: true,
					recursive: true,
				})

				unregisterComponent(...component.split('/'))

				reinjectComponents('all')
			})
	})

program.parse()
