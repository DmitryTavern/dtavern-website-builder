require('dotenv/config')
require('ts-node/register')
const fs = require('fs')
const path = require('path')
const inquirer = require('inquirer')
const { program } = require('commander')
const { mkdir } = require('./scripts/helpers/mkdir')
const { rmdir } = require('./scripts/helpers/rmdir')
const { log, error, warn } = require('./scripts/helpers/logger')
const { templateLoader } = require('./scripts/helpers/templateLoader')
const {
	createPage,
	renamePage,
	includePageStyle,
	includePageScript,
} = require('./scripts/pages-utils')

const {
	readConfig,
	renameComponent,
	registerComponent,
	reinjectComponents,
	unregisterComponent,
	existsComponentByCategory,
	getComponentNamespace,
	getNamespacePathes,
	getNamespaceList,
	getComponentInfo,
	getPageList,
} = require('./scripts/component-utils')

const {
	APP_COMPONENTS_DIR,
	ARTISAN_TEMPLATE_PUG_COMPONENT,
	ARTISAN_TEMPLATE_SCSS_COMPONENT,
	ARTISAN_TEMPLATE_JS_COMPONENT,
	ARTISAN_COMPONENT_CATEGORIES,
	ARTISAN_COMPONENT_AUTOIMPORT,
} = process.env

program.name('artisan')

const createPageQuestions = [
	{ type: 'input', name: 'name', message: 'Page name:' },
	{ type: 'confirm', name: 'scss', message: 'Create scss file?' },
	{ type: 'confirm', name: 'js', message: 'Create js file?' },
]

const createComponentQuestions = [
	{ type: 'input', name: 'name', message: 'Component name:' },
	{ type: 'confirm', name: 'pug', message: 'Create pug file?' },
	{ type: 'confirm', name: 'scss', message: 'Create scss file?' },
	{ type: 'confirm', name: 'js', message: 'Create js file?' },
	{
		type: 'list',
		name: 'category',
		message: 'Select component category:',
		choices: ARTISAN_COMPONENT_CATEGORIES.split(','),
	},
	{
		type: 'list',
		name: 'namespace',
		message: 'Where to connect this component?',
		choices: getNamespaceList(),
	},
]

const removeComponentsQuestions = [
	{
		type: 'list',
		name: 'component',
		message: 'Select component:',
		choices: readConfig().toOneArray(),
	},
]

const renamePageQuestions = [
	{
		type: 'list',
		name: 'name',
		message: 'The page you want to rename',
		choices: getPageList(),
	},
	{ type: 'input', name: 'newName', message: 'New page name (without ext):' },
]

const renameComponentQuestions = [
	{
		type: 'list',
		name: 'name',
		message: 'The component you want to rename',
		choices: readConfig().toOneArray(),
	},
	{
		type: 'input',
		name: 'newName',
		message: 'New component name (without category):',
	},
]

const autoimportStatus = () => ARTISAN_COMPONENT_AUTOIMPORT == 'true'
const inquirerError = (err) => error(`something went wrong`, err)

program
	.command('create:page')
	.description('create new page')
	.option('-f', 'force creating')
	.action((options) => {
		inquirer
			.prompt(createPageQuestions)
			.then(({ name, scss, js }) => {
				const pathes = getNamespacePathes(name)

				if (!options.f && pathes.pugFileExists) {
					return error('Pug file already exitst. Use -f for force creating')
				}

				if (!options.f && pathes.scssFileExists && scss) {
					return error('Scss file already exitst. Use -f for force creating')
				}

				if (!options.f && pathes.jsFileExists && js) {
					return error('Js file already exitst. Use -f for force creating')
				}

				createPage(name)
				if (scss) includePageStyle(name)
				if (js) includePageScript(name)

				log(`Page '${name}.pug' success added`)
			})
			.catch(inquirerError)
	})

program
	.command('create:component')
	.description('create new component')
	.option('-f', 'force creating')
	.action((options) => {
		inquirer
			.prompt(createComponentQuestions)
			.then(({ name, pug, scss, js, category, namespace }) => {
				const componentsDirPath = APP_COMPONENTS_DIR
				const targeteNamespace = namespace.replace('.pug', '')
				const categoryDirPath = path.join(componentsDirPath, category)
				const targetDirPath = path.join(categoryDirPath, name)
				const targetPath = path.join(targetDirPath, name)

				if (!options.f && fs.existsSync(targetDirPath)) {
					return error('Component already exitst. Use -f for force creating')
				}

				mkdir(targetDirPath)

				if (pug) {
					templateLoader()
						.load(ARTISAN_TEMPLATE_PUG_COMPONENT)
						.replace(/\${name}/g, name)
						.write(`${targetPath}.pug`)
				}

				if (scss) {
					templateLoader()
						.load(ARTISAN_TEMPLATE_SCSS_COMPONENT)
						.replace(/\${name}/g, name)
						.write(`${targetPath}.scss`)
				}

				if (js) {
					templateLoader()
						.load(ARTISAN_TEMPLATE_JS_COMPONENT)
						.write(`${targetPath}.js`)
				}

				registerComponent(targeteNamespace, category, name)

				if (autoimportStatus()) {
					reinjectComponents(targeteNamespace)
				}

				log(`Component success added`)
			})
			.catch(inquirerError)
	})

program
	.command('reinject:components')
	.description('reinject all components')
	.action(() => {
		if (autoimportStatus()) {
			reinjectComponents('all')
		} else {
			warn('Autoimport turn off in .env')
		}
	})

program
	.command('remove:component')
	.description('remove component')
	.action(() => {
		inquirer
			.prompt(removeComponentsQuestions)
			.then(({ component }) => {
				rmdir(path.join(APP_COMPONENTS_DIR, component))

				unregisterComponent(...component.split('/'))

				if (autoimportStatus()) {
					reinjectComponents('all')
				}
			})
			.catch(inquirerError)
	})

program
	.command('rename:page')
	.description('renaming page')
	.action(() => {
		inquirer
			.prompt(renamePageQuestions)
			.then(({ name, newName }) => {
				if (getPageList().includes(newName)) {
					error(
						`New name '${newName}' is already taken. Please, use other name.`
					)
					return
				}

				renamePage(name, newName)
			})
			.catch(inquirerError)
	})

program
	.command('rename:component')
	.description('renaming component')
	.action(() => {
		inquirer
			.prompt(renameComponentQuestions)
			.then(({ name, newName }) => {
				const namespace = getComponentNamespace(name)
				const { category } = getComponentInfo(name)

				if (existsComponentByCategory(category, newName)) {
					error(
						`New name '${newName}' is already taken. Please, use other name.`
					)
					return
				}

				renameComponent(name, newName)
				reinjectComponents(namespace)
			})
			.catch(inquirerError)
	})

program.parse()
