require('dotenv/config')
require('ts-node/register')
const fs = require('fs')
const path = require('path')
const inquirer = require('inquirer')
const { program } = require('commander')
const { mkdir } = require('./scripts/helpers/mkdir')
const { log, error } = require('./scripts/helpers/logger')
const { capitalize } = require('./scripts/helpers/textTransformUtils')
const { templateLoader } = require('./scripts/helpers/templateLoader')

const {
	APP_PAGES_DIR,
	APP_PAGES_STYLES_DIR,
	APP_PAGES_SCRIPTS_DIR,
	APP_COMPONENTS_DIR,
	ARTISAN_TEMPLATE_PUG_PAGE,
	ARTISAN_TEMPLATE_SCSS_PAGE,
	ARTISAN_TEMPLATE_JS_PAGE,
	ARTISAN_TEMPLATE_PUG_COMPONENT,
	ARTISAN_TEMPLATE_SCSS_COMPONENT,
	ARTISAN_TEMPLATE_JS_COMPONENT,
	ARTISAN_COMPONENT_CATEGORIES,
} = process.env

program.name('artisan').option('-f, --force', 'force command')

const createPageQuestions = [
	{ type: 'input', name: 'name', message: 'Page name:' },
	{ type: 'confirm', name: 'scss', message: 'Create scss file?' },
	{ type: 'confirm', name: 'js', message: 'Create js file?' },
]

const createComponentQuestions = [
	{ type: 'input', name: 'name', message: 'Component name:' },
	{ type: 'confirm', name: 'pug', message: 'Create pug file?' },
	{ type: 'confirm', name: 'scss', message: 'Create scss file?' },
	{ type: 'confirm', name: 'js', message: 'Create js file?' },
	{
		type: 'list',
		name: 'category',
		message: 'Select component category:',
		choices: ARTISAN_COMPONENT_CATEGORIES.split(','),
	},
]

const inquirerError = (error) => error(`something went wrong`, error)

program
	.command('create:page')
	.description('create new page')
	.option('-f', 'force creating')
	.action((options) => {
		inquirer
			.prompt(createPageQuestions)
			.then(({ name, scss, js }) => {
				const pugPath = path.join(APP_PAGES_DIR, `${name}.pug`)
				const scssPath = path.join(APP_PAGES_STYLES_DIR, `${name}.scss`)
				const jsPath = path.join(APP_PAGES_SCRIPTS_DIR, `${name}.js`)

				if (!options.f && fs.existsSync(pugPath)) {
					return error('Pug file already exitst. Use -f for force creating')
				}

				if (!options.f && fs.existsSync(scssPath) && scss) {
					return error('Scss file already exitst. Use -f for force creating')
				}

				if (!options.f && fs.existsSync(jsPath) && js) {
					return error('Js file already exitst. Use -f for force creating')
				}

				const titleContent = `title ${capitalize(name)} | Project name\n`
				const styleContent = scss ? `+style('${name}.css')\n` : ''
				const scriptContent = js
					? `block script\n\t+script('${name}.js')\n`
					: ''

				templateLoader
					.load(ARTISAN_TEMPLATE_PUG_PAGE)
					.replace('@-title', titleContent)
					.replace('@-style', styleContent)
					.replace('@-script', scriptContent)
					.write(pugPath)

				if (scss)
					templateLoader.load(ARTISAN_TEMPLATE_SCSS_PAGE).write(scssPath)
				if (js) templateLoader.load(ARTISAN_TEMPLATE_JS_PAGE).write(jsPath)

				log(`Page '${name}.pug' success added`)
			})
			.catch(inquirerError)
	})

program
	.command('create:component')
	.description('create new component')
	.option('-f', 'force creating')
	.action((options) => {
		inquirer
			.prompt(createComponentQuestions)
			.then(({ name, category, pug, scss, js }) => {
				const typePath = path.join(APP_COMPONENTS_DIR, category)
				const componentPath = path.join(typePath, name)

				if (!options.f && fs.existsSync(componentPath)) {
					return error('Component already exitst. Use -f for force creating')
				}

				mkdir(APP_COMPONENTS_DIR)
				mkdir(typePath)
				mkdir(componentPath)

				if (pug) {
					templateLoader
						.load(ARTISAN_TEMPLATE_PUG_COMPONENT)
						.replace('@-mixin', `mixin ${name}\n\t.${name}\n`)
						.write(path.join(componentPath, `${name}.pug`))
				}

				if (scss) {
					templateLoader
						.load(ARTISAN_TEMPLATE_SCSS_COMPONENT)
						.replace('@-class', `.${name} {\n\t\n}\n`)
						.write(path.join(componentPath, `${name}.scss`))
				}

				if (js) {
					templateLoader
						.load(ARTISAN_TEMPLATE_JS_COMPONENT)
						.write(path.join(componentPath, `${name}.js`))
				}

				log(`Component '${name}' success added`)
			})
			.catch(inquirerError)
	})

program.parse()
